CREATE OR REPLACE FUNCTION `{$schema}`.`{$funcName}`()
    RETURNS `pg_catalog`.`trigger` AS $BODY$
DECLARE
    step integer;
    table_name text;
    col_name text;
    col_name_quoted text;
    col_value integer;
    seq_name text;
    pk_name text;
    pk_value integer;
    max_position integer;
    is_conflict boolean;
BEGIN
    -- args: 0 = positioning column name; 1 = primary key column name; 2 = sequence name; 3 = sequence step
    IF (TG_OP = ``UPDATE`` AND TG_LEVEL = ``ROW``) THEN
        table_name := (quote_ident(TG_TABLE_SCHEMA) || ``.`` || quote_ident(TG_TABLE_NAME));
        col_name := COALESCE(TG_ARGV[0], ``position``);
        col_name_quoted := quote_ident(col_name);
        EXECUTE ``SELECT ($1).`` || col_name_quoted || ``::integer`` INTO col_value USING NEW;
        pk_name := quote_ident(COALESCE(TG_ARGV[1], ``id``));
        EXECUTE ``SELECT ($1).`` || pk_name || ``::integer`` INTO pk_value USING NEW;
        EXECUTE ``SELECT true FROM `` || table_name || `` WHERE `` || pk_name || `` != $1 AND `` || col_name_quoted || `` = $2 LIMIT 1`` INTO is_conflict USING pk_value, col_value;
        IF is_conflict = true THEN
            step := COALESCE(TG_ARGV[3], ``100``)::integer;
            EXECUTE ``UPDATE `` || table_name || `` SET `` || col_name_quoted || `` = `` || col_name_quoted || `` + $1 WHERE `` || pk_name || `` != $2 AND `` || col_name_quoted || `` >= $3`` USING step, pk_value, col_value;
        END IF;
        EXECUTE ``SELECT (`` || col_name_quoted || ``)::INTEGER FROM `` || table_name || `` ORDER BY `` || col_name_quoted || `` DESC LIMIT 1`` INTO max_position;
        seq_name := quote_ident(TG_TABLE_SCHEMA) || ``.`` || quote_ident(COALESCE(TG_ARGV[2], TG_TABLE_NAME || ``_`` || col_name || ``_seq``));
        EXECUTE ``SELECT setval(`` || quote_literal(seq_name) || ``::regclass, `` || max_position || ``::integer)``;
    END IF;
    RETURN NULL;
END;
$BODY$
    LANGUAGE ``plpgsql`` VOLATILE COST 100
;
